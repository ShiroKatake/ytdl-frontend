{"version":3,"sources":["components/Button/Button.tsx","components/Card/Card.tsx","components/FormatList/FormatList.tsx","components/TextInput/TextInput.tsx","utils/helpers.js","utils/API.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","main","children","isLoading","onClick","disabled","className","Card","suggestions","download","map","video","href","id","rel","target","style","backgroundImage","bestThumbnail","url","author","name","he","decode","title","formats","FormatList","downloadFormat","setDownloadFormat","format","type","checked","value","onChange","e","htmlFor","TextInput","inputText","setInputText","useState","focus","setFocus","placeholder","spellCheck","autoComplete","onBlur","onFocus","autoFocus","host","window","location","hostname","getDownloadUrl","videoId","isYtList","RegExp","test","isJson","str","JSON","parse","waitForOpenConnection","socket","Promise","resolve","reject","currentAttempt","interval","setInterval","maxNumberOfAttempts","clearInterval","Error","readyState","OPEN","isUid","res","match","toMB","i","toFixed","API","axios","create","baseURL","responseType","getSuggestions","searchQuery","a","get","response","data","console","log","getInfos","getPlaylist","plId","downloadFileFromUrl","videoDownloadUrl","uid","setDownloadProgress","method","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","then","fileName","headers","exec","URL","createObjectURL","Blob","link","document","createElement","setAttribute","body","appendChild","click","remove","App","setSuggestions","playlist","setPlaylist","currentVideoInfo","setCurrentVideoInfo","setIsLoading","downloadProgress","hidden","setHidden","downloaded","setDownloaded","totalSize","setTotalSize","checkInput","fetchPlaylist","fetchSuggestions","success","undefined","items","videoUrl","downloadUrl","protocol","WebSocket","replace","addEventListener","event","send","error","videoDetails","setTimeout","ProgressBar","striped","variant","now","label","text","progressText","width","height","lineHeight","src","alt","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2VASaA,EAAS,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,KAAMC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,QAClD,OACE,yBAAQC,SAAUF,EAAWG,UAAS,sBAAiBL,EAAO,OAAS,GAAjC,YAAuCE,EAAY,UAAY,IAAMC,QAASA,EAApH,UACE,4BAAIF,IACJ,qBAAKI,UAAU,gB,iBCFRC,G,MAAO,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,YAAaL,EAAsC,EAAtCA,UAAWM,EAA2B,EAA3BA,SAC7C,OACE,qBAAKH,UAAU,OAAf,SACGE,EAAYE,KAAI,SAACC,GAChB,OACE,sBAAoBL,UAAU,OAA9B,UACE,oBAAGM,KAAI,sCAAiCD,EAAME,IAAMC,IAAI,sBAAsBC,OAAO,SAArF,UACE,qBAAKT,UAAU,QAAQU,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAMO,cAAcC,IAA7B,QAC/C,qBAAKb,UAAU,QAAf,SAAwBK,EAAMS,OAAOC,KAAO,MAAQC,IAAGC,OAAOZ,EAAMa,YAEtE,cAAC,EAAD,CAAQrB,UAAWA,EAAWC,QAAS,kBAAMK,EAASE,EAAME,KAA5D,wBALQF,EAAME,WCbpBY,G,MAAU,CACd,CACEZ,GAAI,MACJQ,KAAM,OAER,CACER,GAAI,MACJQ,KAAM,OAER,CACER,GAAI,MACJQ,KAAM,OAER,CACER,GAAI,MACJQ,KAAM,SASGK,EAAa,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,eAAgBC,EAA0C,EAA1CA,kBAC3C,OACE,oBAAItB,UAAU,cAAd,SACGmB,EAAQf,KAAI,SAAAmB,GACX,OACE,+BACE,uBACEC,KAAK,QACLjB,GAAIgB,EAAOhB,GACXQ,KAAK,SACLU,QAASJ,IAAmBE,EAAOhB,GACnCmB,MAAOH,EAAOhB,GACdoB,SAAU,SAAAC,GAAC,OAAIN,EAAkBM,EAAEnB,OAAOiB,UAE5C,uBAAOG,QAASN,EAAOhB,GAAIP,UAAU,cAArC,SACGuB,EAAOR,SAVHQ,EAAOhB,UCxBbuB,G,MAAY,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,aACrC,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OACE,qBAAKnC,UAAS,0BAAqBkC,EAAQ,SAAW,IAAtD,SACE,uBACEV,KAAK,OACLT,KAAK,QACLR,GAAG,OACH6B,YAAY,sBACZC,YAAY,EACZC,aAAa,MACbC,OAAQ,kBAAMJ,GAAS,IACvBK,QAAS,kBAAML,GAAS,IACxBT,MAAOK,EACPJ,SAAU,SAAAC,GAAC,OAAII,EAAaJ,EAAEnB,OAAOiB,QACrCe,WAAS,Q,wBCvBJC,EAAoC,cAA7BC,OAAOC,SAASC,SAA2B,wBAA0B,iDAE5EC,EAAiB,SAACC,GAAD,IAAUxB,EAAV,uDAAmB,MAAnB,gBAAgCmB,EAAhC,uBAAmDK,EAAnD,mBAAqExB,IAatFyB,EAAW,SAAAnC,GAEtB,OADgB,IAAIoC,OAAO,qGACZC,KAAKrC,IAiBTsC,EAAS,SAAAC,GACpB,IACEC,KAAKC,MAAMF,GACX,MAAOxB,GACP,OAAO,EAET,OAAO,GAGI2B,EAAwB,SAAAC,GACnC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAGIC,EAAiB,EACfC,EAAWC,aAAY,WACvBF,EAAiBG,GACnBC,cAAcH,GACdF,EAAO,IAAIM,MAAM,yCACRT,EAAOU,aAAeV,EAAOW,OACtCH,cAAcH,GACdH,KAEFE,MAXmB,SAgBZQ,EAAQ,SAAAhB,GACnB,IACMiB,EAAMjB,EAAIkB,MADF,kCAEd,OAAOD,EAAMA,EAAI,GAAK,MAGXE,EAAO,SAAAC,GAAC,OAAKA,EAAI,KAAO,MAAMC,QAAQ,IClEtCC,EAAMC,IAAMC,OAAO,CAC9BC,QAASnC,EACToC,aAAc,SAGHC,EAAc,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,+EAEHP,EAAIQ,IAAJ,8BAA+BF,IAF5B,cAEpBG,EAFoB,OAGlBC,EAASD,EAATC,KAHkB,kBAInBA,GAJmB,gCAM1BC,QAAQC,IAAI,KAAMH,SAASC,MAND,yDAAH,sDAUdG,EAAQ,uCAAG,WAAM1E,GAAN,iBAAAoE,EAAA,+EAEGP,EAAIQ,IAAJ,wBAAyBrE,IAF5B,cAEdsE,EAFc,OAGZC,EAASD,EAATC,KAHY,kBAIbA,GAJa,gCAMpBC,QAAQC,IAAI,KAAMH,SAASC,MANP,yDAAH,sDAURI,EAAW,uCAAG,WAAMC,GAAN,iBAAAR,EAAA,+EAEAP,EAAIQ,IAAJ,uBAAwBO,IAFxB,cAEjBN,EAFiB,OAGfC,EAASD,EAATC,KAHe,kBAIhBA,GAJgB,gCAMvBC,QAAQC,IAAI,KAAMH,SAASC,MANJ,yDAAH,sDAUXM,EAAmB,uCAAG,WAAOC,EAAkBC,EAAKC,GAA9B,SAAAZ,EAAA,+EAEzBN,IAAM,CACV9D,IAAK8E,EACLG,OAAQ,OACRhB,aAAc,OACdM,KAAM,CAAEQ,IAAKA,GACbG,mBAAoB,SAAAC,GAClB,IAAIC,EAAmB,GAAsE,IAAjEC,KAAKC,MAA8B,IAAvBH,EAAcI,OAAgBJ,EAAcK,OACpFR,EAAoBI,GACpBZ,QAAQC,IAAIW,MAEbK,MAAK,SAAAnB,GACN,IDrByB/B,ECqBnBmD,GDrBmBnD,ECqBQ+B,EAASqB,QAAQ,uBDpBxC,2BACDC,KAAKrD,GAAK,ICoBbvC,EAAM8B,OAAO+D,IAAIC,gBAAgB,IAAIC,KAAK,CAACzB,EAASC,QAEpDyB,EAAOC,SAASC,cAAc,KACpCF,EAAKvG,KAAOO,EACZgG,EAAKG,aAAa,WAAYT,GAC9BO,SAASG,KAAKC,YAAYL,GAE1BA,EAAKM,QACLN,EAAKO,YAtBwB,sDAyB/B/B,QAAQC,IAAR,MAzB+B,wDAAH,0D,QCoHjB+B,EAnJH,WACV,MAAkCpF,mBAAS,IAA3C,mBAAOF,EAAP,KAAkBC,EAAlB,KACA,EAA4CC,mBAAS,OAArD,mBAAOZ,EAAP,KAAuBC,EAAvB,KACA,EAAsCW,mBAAc,IAApD,mBAAO/B,EAAP,KAAoBoH,EAApB,KACA,EAAgCrF,mBAAc,IAA9C,mBAAOsF,EAAP,KAAiBC,EAAjB,KACA,EAAgDvF,mBAAc,MAA9D,mBAAOwF,EAAP,KAAyBC,EAAzB,KAEA,EAAkCzF,oBAAS,GAA3C,mBAAOpC,EAAP,KAAkB8H,EAAlB,KACA,EAAgD1F,mBAAS,GAAzD,mBAAO2F,EAAP,KAAyB/B,EAAzB,KACA,EAA4B5D,oBAAS,GAArC,mBAAO4F,EAAP,KAAeC,EAAf,KAEA,EAAoC7F,mBAAS,GAA7C,oBAAO8F,GAAP,MAAmBC,GAAnB,MACA,GAAkC/F,mBAAS,GAA3C,qBAAOgG,GAAP,MAAkBC,GAAlB,MAEMC,GAAU,uCAAG,sBAAAlD,EAAA,yDACjB0C,GAAa,GFbM9G,EEcPkB,GFbE,IAAIkB,OAClB,8IAEaC,KAAKrC,GEQD,gCAGTV,GAAS4B,GAHA,kCAINiB,EAASjB,GAJH,iBAKfqG,KALe,yCAOTC,KAPS,QASjBV,GAAa,GATI,kCFZE,IAAA9G,IEYF,OAAH,qDAYVwH,GAAgB,uCAAG,8BAAApD,EAAA,+EAEWF,EAAehD,GAF1B,gBAEbqD,EAFa,EAEbA,KAFa,EAEPkD,UAEZhB,EAAelC,GACfoC,EAAY,IACZE,OAAoBa,IAND,yGAAH,qDAWhBH,GAAa,uCAAG,8BAAAnD,EAAA,+EAEcO,EAAYzD,GAF1B,gBAEVqD,EAFU,EAEVA,KAFU,EAEJkD,UAEZd,EAAYpC,EAAKoD,OACjBlB,EAAe,IACfI,OAAoBa,IANJ,yGAAH,qDAWbpI,GAAQ,uCAAG,WAAO4C,GAAP,2BAAAkC,EAAA,yDACf0C,GAAa,GACbG,GAAU,GACJW,EAAW1F,GAAWhB,EAHb,iEAKiBwD,EAASkD,GAL1B,mBAKPrD,EALO,EAKPA,MALO,EAKDkD,QALC,oBAOPI,EAAc5F,EAAe2F,EAAUpH,GACzCsH,EAAW,MACkB,cAA7BhG,OAAOC,SAASC,WAA0B8F,EAAW,MAEnDnF,EAAS,IAAIoF,UAAJ,UAAiBlG,EAAKmG,QAAQ,WAAYF,KAErD/C,EAAM,GAGVpC,EAAOsF,iBAAiB,WAAW,SAAAC,GAIjC,GAHI3E,EAAM2E,EAAM3D,QACdQ,EAAMxB,EAAM2E,EAAM3D,OAEhBjC,EAAO4F,EAAM3D,MAAO,CACtB,IAAMwC,EAAmBvE,KAAKC,MAAMyF,EAAM3D,MAC1CS,EAAqB+B,EAAiBG,WAAaH,EAAiBvB,MAAS,IAC7E2B,GAAcJ,EAAiBG,YAC/BG,GAAaN,EAAiBvB,WAI9B7C,EAAOU,aAAeV,EAAOW,KA5BpB,4CA8BHZ,EAAsBC,GA9BnB,QA+BTA,EAAOwF,KAAKpD,GA/BH,mDAiCTP,QAAQ4D,MAAR,MAjCS,gCAoCXzF,EAAOwF,KAAKpD,GApCD,eAuCb8B,EAAoBtC,EAAK8D,cACzB7D,QAAQC,IAAI,2BAxCC,UAyCPI,EAAoBgD,EAAa9C,EAAKC,GAzC/B,QA0Cb8B,GAAa,GACbwB,YAAW,WACTrB,GAAU,GACVjC,EAAoB,KACnB,KA9CU,2DAAH,sDA6Dd,OACE,qCACE,0BAAS7F,UAAU,iBAAnB,UACE,cAAC,EAAD,CAAW+B,UAAWA,EAAWC,aAAcA,IAC/C,cAACoH,EAAA,EAAD,CACEvB,OAAQA,EACRwB,SAAO,EACPC,QAAQ,UACRC,IAAK3B,EACL4B,MAAK,UApBQ,SAAC5B,GACpB,IAAI6B,EAAO,iBAOX,OANI7B,EAAmB,KACrB6B,EAAO,4BAEgB,MAArB7B,IACF6B,EAAO,UAEFA,EAYSC,CAAa9B,GAAlB,YAAuCrD,EAAKwD,IAA5C,eAA8DxD,EAAK0D,IAAnE,MACLvH,MAAO,CAAEiJ,MAAO,OAAQC,OAAQ,OAAQC,WAAY,UAEtD,cAAC,EAAD,CAAYxI,eAAgBA,EAAgBC,kBAAmBA,IAC/D,cAAC,EAAD,CAAQ3B,MAAI,EAACE,UAAWA,EAAWC,QAASqI,GAA5C,uBAIDV,GACC,yBAASzH,UAAU,sBAAnB,SACE,gCACE,6BAAKyH,EAAiBvG,QACtB,uBACA,qBAAK4I,IAAG,iCAA4BrC,EAAiB1E,QAA7C,kBAAsEgH,IAAKtC,EAAiBvG,aAI1G,0BAASlB,UAAU,sBAAnB,YACKE,EAAY8J,QAAU,6CACzB,cAAC,EAAD,CAAM9J,YAAaA,EAAaL,UAAWA,EAAWM,SAAUA,QAElE,0BAASH,UAAU,mBAAnB,YACKuH,EAASyC,QAAU,6CACtB,cAAC,EAAD,CAAM9J,YAAaqH,EAAU1H,UAAWA,EAAWM,SAAUA,YCtItD8J,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7D,SAAS8D,eAAe,SAM1BX,M","file":"static/js/main.4bee2892.chunk.js","sourcesContent":["import \"./Button.css\";\r\n\r\ninterface IButtonProps {\r\n  main?: boolean;\r\n  children: string;\r\n  isLoading: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const Button = ({ main, children, isLoading, onClick }: IButtonProps) => {\r\n  return (\r\n    <button disabled={isLoading} className={`btn-animate ${main ? \"main\" : \"\"} ${isLoading ? \"loading\" : \"\"}`} onClick={onClick}>\r\n      <p>{children}</p>\r\n      <div className=\"spinner\" />\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport he from \"he\";\r\nimport { Button } from \"..\";\r\nimport \"./Card.css\";\r\n\r\ninterface ICardProps {\r\n  suggestions: any[];\r\n  isLoading: boolean;\r\n  download: (videoId: string) => void;\r\n}\r\n\r\nexport const Card = ({ suggestions, isLoading, download }: ICardProps) => {\r\n  return (\r\n    <div className=\"grid\">\r\n      {suggestions.map((video: any) => {\r\n        return (\r\n          <div key={video.id} className=\"card\">\r\n            <a href={`https://youtube.com/watch?v=${video.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\r\n              <div className=\"image\" style={{ backgroundImage: `url(${video.bestThumbnail.url})` }}></div>\r\n              <div className=\"title\">{video.author.name + \" - \" + he.decode(video.title)}</div>\r\n            </a>\r\n            <Button isLoading={isLoading} onClick={() => download(video.id)}>\r\n              Download\r\n            </Button>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport \"./FormatList.css\";\r\n\r\nconst formats = [\r\n  {\r\n    id: \"mp4\",\r\n    name: \"mp4\",\r\n  },\r\n  {\r\n    id: \"mp3\",\r\n    name: \"mp3\",\r\n  },\r\n  {\r\n    id: \"mov\",\r\n    name: \"mov\",\r\n  },\r\n  {\r\n    id: \"flv\",\r\n    name: \"flv\",\r\n  },\r\n];\r\n\r\ninterface IFormatListProps {\r\n  downloadFormat: string;\r\n  setDownloadFormat: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const FormatList = ({ downloadFormat, setDownloadFormat }: IFormatListProps) => {\r\n  return (\r\n    <ul className=\"format-list\">\r\n      {formats.map(format => {\r\n        return (\r\n          <li key={format.id}>\r\n            <input\r\n              type=\"radio\"\r\n              id={format.id}\r\n              name=\"format\"\r\n              checked={downloadFormat === format.id}\r\n              value={format.id}\r\n              onChange={e => setDownloadFormat(e.target.value)}\r\n            />\r\n            <label htmlFor={format.id} className=\"radio-label\">\r\n              {format.name}\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport \"./TextInput.css\";\r\n\r\ninterface ITextInputProps {\r\n  inputText: string;\r\n  setInputText: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const TextInput = ({ inputText, setInputText }: ITextInputProps) => {\r\n  const [focus, setFocus] = useState(false);\r\n\r\n  return (\r\n    <div className={`input-container ${focus ? \"shadow\" : \"\"}`}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"input\"\r\n        id=\"text\"\r\n        placeholder=\"Search or paste url\"\r\n        spellCheck={false}\r\n        autoComplete=\"off\"\r\n        onBlur={() => setFocus(false)}\r\n        onFocus={() => setFocus(true)}\r\n        value={inputText}\r\n        onChange={e => setInputText(e.target.value)}\r\n        autoFocus\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// Requires to have the local backend if you wanna run backend\r\nexport const host = window.location.hostname === \"localhost\" ? \"http://localhost:4000\" : \"https://shirokatake-ytdl-backend.herokuapp.com\";\r\n\r\nexport const getDownloadUrl = (videoId, format = \"mp4\") => `${host}/download?v=${videoId}&format=${format}`;\r\n\r\nexport const secondsToMinutes = time => {\r\n  return Math.floor(time / 60) + \":\" + Math.floor(time % 60);\r\n};\r\n\r\nexport const isYtUrl = url => {\r\n  const ytRegex = new RegExp(\r\n    /^(?:https?:\\/\\/)?(?:music\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((?:\\w|-){11})(?:&\\S*)?(?:\\?\\S*)?$/\r\n  );\r\n  return ytRegex.test(url); //Change to .match() to debug\r\n};\r\n\r\nexport const isYtList = url => {\r\n  const plRegex = new RegExp(/^https?:\\/\\/(?:music\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/)playlist\\?list=([a-zA-Z0-9\\-_]{34})$/);\r\n  return plRegex.test(url);\r\n};\r\n\r\nexport const isYtMixList = url => {\r\n  const mixPlRegex = new RegExp(/https?:\\/\\/(?:music\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/)(?:watch\\?v=[a-zA-Z0-9]*&)?list=([a-zA-Z0-9\\-_]{13})&?/);\r\n  return mixPlRegex.test(url);\r\n};\r\n\r\nexport const changeFormatStorage = format => {\r\n  localStorage.setItem(\"format\", format);\r\n};\r\n\r\nexport const extractFileName = str => {\r\n  const regex = /.*filename=['\"]?([^\"]+)/g;\r\n  return regex.exec(str)[1];\r\n};\r\n\r\nexport const isJson = str => {\r\n  try {\r\n    JSON.parse(str);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const waitForOpenConnection = socket => {\r\n  return new Promise((resolve, reject) => {\r\n    const maxNumberOfAttempts = 10;\r\n    const intervalTime = 200; //ms\r\n\r\n    let currentAttempt = 0;\r\n    const interval = setInterval(() => {\r\n      if (currentAttempt > maxNumberOfAttempts - 1) {\r\n        clearInterval(interval);\r\n        reject(new Error(\"Maximum number of attempts exceeded\"));\r\n      } else if (socket.readyState === socket.OPEN) {\r\n        clearInterval(interval);\r\n        resolve();\r\n      }\r\n      currentAttempt++;\r\n    }, intervalTime);\r\n  });\r\n};\r\n\r\nexport const isUid = str => {\r\n  const regex = /[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}/g;\r\n  const res = str.match(regex);\r\n  return res ? res[0] : null;\r\n};\r\n\r\nexport const toMB = i => (i / 1024 / 1024).toFixed(2);\r\n","import axios from \"axios\";\r\nimport { host, extractFileName } from \"./helpers\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: host,\r\n  responseType: \"json\",\r\n});\r\n\r\nexport const getSuggestions = async searchQuery => {\r\n  try {\r\n    const response = await API.get(`/suggestions?search=${searchQuery}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getInfos = async url => {\r\n  try {\r\n    const response = await API.get(`/metainfo?url=${url}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getPlaylist = async plId => {\r\n  try {\r\n    const response = await API.get(`/playlist?pl=${plId}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const downloadFileFromUrl = async (videoDownloadUrl, uid, setDownloadProgress) => {\r\n  try {\r\n    await axios({\r\n      url: videoDownloadUrl,\r\n      method: \"POST\",\r\n      responseType: \"blob\",\r\n      data: { uid: uid },\r\n      onDownloadProgress: progressEvent => {\r\n        let percentCompleted = 75 + Math.round((progressEvent.loaded * 100) / progressEvent.total) * 0.25;\r\n        setDownloadProgress(percentCompleted);\r\n        console.log(percentCompleted);\r\n      },\r\n    }).then(response => {\r\n      const fileName = extractFileName(response.headers[\"content-disposition\"]);\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n\r\n      link.click();\r\n      link.remove();\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Card, FormatList, TextInput } from \"./components\";\nimport { getInfos, getSuggestions, downloadFileFromUrl, getPlaylist } from \"./utils/API\";\nimport { host, isYtUrl, isYtList, getDownloadUrl, isJson, isUid, waitForOpenConnection, toMB } from \"./utils/helpers\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [downloadFormat, setDownloadFormat] = useState(\"mp4\");\n  const [suggestions, setSuggestions] = useState<any>([]);\n  const [playlist, setPlaylist] = useState<any>([]);\n  const [currentVideoInfo, setCurrentVideoInfo] = useState<any>(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [downloadProgress, setDownloadProgress] = useState(0);\n  const [hidden, setHidden] = useState(true);\n\n  const [downloaded, setDownloaded] = useState(0);\n  const [totalSize, setTotalSize] = useState(1);\n\n  const checkInput = async () => {\n    setIsLoading(true);\n    if (isYtUrl(inputText)) {\n      await download(inputText);\n    } else if (isYtList(inputText)) {\n      fetchPlaylist();\n    } else {\n      await fetchSuggestions();\n    }\n    setIsLoading(false);\n  };\n\n  const fetchSuggestions = async () => {\n    try {\n      const { data, success } = await getSuggestions(inputText);\n      if (success) {\n        setSuggestions(data);\n        setPlaylist([]);\n        setCurrentVideoInfo(undefined);\n      }\n    } catch (err) {}\n  };\n\n  const fetchPlaylist = async () => {\n    try {\n      const { data, success } = await getPlaylist(inputText);\n      if (success) {\n        setPlaylist(data.items);\n        setSuggestions([]);\n        setCurrentVideoInfo(undefined);\n      }\n    } catch (err) {}\n  };\n\n  const download = async (videoId: string) => {\n    setIsLoading(true);\n    setHidden(false);\n    const videoUrl = videoId || inputText;\n    if (!videoUrl) return;\n    const { data, success } = await getInfos(videoUrl);\n    if (success) {\n      const downloadUrl = getDownloadUrl(videoUrl, downloadFormat);\n      let protocol = \"wss\";\n      if (window.location.hostname === \"localhost\") protocol = \"ws\";\n      // Create WebSocket connection.\n      const socket = new WebSocket(`${host.replace(/^https?/i, protocol)}`);\n\n      let uid = \"\";\n\n      // Listen for messages\n      socket.addEventListener(\"message\", event => {\n        if (isUid(event.data)) {\n          uid = isUid(event.data);\n        }\n        if (isJson(event.data)) {\n          const downloadProgress = JSON.parse(event.data);\n          setDownloadProgress((downloadProgress.downloaded / downloadProgress.total) * 75);\n          setDownloaded(downloadProgress.downloaded);\n          setTotalSize(downloadProgress.total);\n        }\n      });\n\n      if (socket.readyState !== socket.OPEN) {\n        try {\n          await waitForOpenConnection(socket);\n          socket.send(uid);\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        socket.send(uid);\n      }\n\n      setCurrentVideoInfo(data.videoDetails);\n      console.log(\"Starting download . . .\");\n      await downloadFileFromUrl(downloadUrl, uid, setDownloadProgress);\n      setIsLoading(false);\n      setTimeout(() => {\n        setHidden(true);\n        setDownloadProgress(0);\n      }, 5000);\n    }\n  };\n\n  const progressText = (downloadProgress: number) => {\n    let text = \"Fetching . . .\";\n    if (downloadProgress > 75) {\n      text = \"Preparing download . . .\";\n    }\n    if (downloadProgress === 100) {\n      text = \"Ready!\";\n    }\n    return text;\n  };\n\n  return (\n    <>\n      <section className=\"search-section\">\n        <TextInput inputText={inputText} setInputText={setInputText} />\n        <ProgressBar\n          hidden={hidden}\n          striped\n          variant=\"success\"\n          now={downloadProgress}\n          label={`${progressText(downloadProgress)} ${toMB(downloaded)}MB /${toMB(totalSize)}MB`}\n          style={{ width: \"100%\", height: \"30px\", lineHeight: \"30px\" }}\n        />\n        <FormatList downloadFormat={downloadFormat} setDownloadFormat={setDownloadFormat} />\n        <Button main isLoading={isLoading} onClick={checkInput}>\n          Search\n        </Button>\n      </section>\n      {currentVideoInfo && (\n        <section className=\"downloading-section\">\n          <div>\n            <h2>{currentVideoInfo.title}</h2>\n            <br />\n            <img src={`https://i.ytimg.com/vi/${currentVideoInfo.videoId}/hqdefault.jpg`} alt={currentVideoInfo.title} />\n          </div>\n        </section>\n      )}\n      <section className=\"suggestions-section\">\n        {!!suggestions.length && <h1>Suggestions</h1>}\n        <Card suggestions={suggestions} isLoading={isLoading} download={download} />\n      </section>\n      <section className=\"playlist-section\">\n        {!!playlist.length && <h1>Suggestions</h1>}\n        <Card suggestions={playlist} isLoading={isLoading} download={download} />\n      </section>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}