{"version":3,"sources":["components/Button.tsx","components/Card.tsx","utils/helpers.js","utils/API.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","onClick","className","Card","title","videoId","thumbnailUrl","description","handleDownload","href","rel","target","style","backgroundImage","he","decode","React","memo","host","getDownloadUrl","format","API","axios","create","baseURL","responseType","getSuggestions","searchQuery","a","get","response","data","console","log","getInfos","url","isUid","str","res","match","socket","WebSocket","replace","uid","addEventListener","event","JSON","parse","e","isJson","downloadFileFromUrl","videoDownloadUrl","send","method","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","lengthComputable","then","fileName","headers","exec","window","URL","createObjectURL","Blob","link","document","createElement","setAttribute","body","appendChild","click","remove","error","formats","id","name","isChecked","App","useState","inputText","setInputText","downloadFormat","setDownloadFormat","suggestions","setSuggestions","currentVideoInfo","setCurrentVideoInfo","focus","setFocus","fetchSuggestions","success","undefined","download","videoUrl","downloadUrl","videoDetails","type","placeholder","spellCheck","autoComplete","onBlur","onFocus","value","onChange","autoFocus","map","checked","htmlFor","RegExp","test","src","alt","length","video","s","snippet","thumbnails","medium","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01cb6771.chunk.js","sourcesContent":["interface IButtonProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst Button = ({ onClick }: IButtonProps) => {\r\n  return (\r\n    <>\r\n      <button className=\"btn-animate\" onClick={onClick}>\r\n        Search\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport he from \"he\";\r\n\r\ninterface ICardProps {\r\n  title: string;\r\n  videoId: string;\r\n  description: string;\r\n  thumbnailUrl: string;\r\n  handleDownload: (videoId: string) => void;\r\n}\r\n\r\nconst Card = ({ title, videoId, description, thumbnailUrl, handleDownload }: ICardProps) => {\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <a href={`https://youtube.com/watch?v=${videoId}`} rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <div className=\"image\" style={{ backgroundImage: `url(${thumbnailUrl})` }}></div>\r\n          <div className=\"title\">{he.decode(title)}</div>\r\n        </a>\r\n        <button onClick={() => handleDownload(videoId)} className=\"download\">\r\n          Download\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Card);\r\n","// Requires to have the local backend if you wanna run backend\r\n// export const host = \"http://localhost:4000\";\r\nexport const host = \"https://shirokatake-ytdl-backend.herokuapp.com\";\r\n\r\nexport const getDownloadUrl = (videoId, format = \"mp4\") => `${host}/download?v=${videoId}&format=${format}`;\r\n\r\nexport const secondsToMinutes = time => {\r\n  return Math.floor(time / 60) + \":\" + Math.floor(time % 60);\r\n};\r\n\r\nexport const isYtUrl = url => {\r\n  const ytRegex = new RegExp(\r\n    /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(\\?\\S*)?$/\r\n  );\r\n  return ytRegex.test(url);\r\n};\r\n\r\nexport const changeFormatStorage = format => {\r\n  localStorage.setItem(\"format\", format);\r\n};\r\n","import axios from \"axios\";\r\nimport { host } from \"./helpers\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: host,\r\n  responseType: \"json\",\r\n});\r\n\r\nexport const getSuggestions = async searchQuery => {\r\n  try {\r\n    const response = await API.get(`/suggestions?search=${searchQuery}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getInfos = async url => {\r\n  try {\r\n    const response = await API.get(`/metainfo?url=${url}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nconst extractFileName = str => {\r\n  const regex = /.*filename=['\"]?([^\"]+)/g;\r\n  return regex.exec(str)[1];\r\n};\r\n\r\nfunction isJson(str) {\r\n  try {\r\n    JSON.parse(str);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nconst isUid = str => {\r\n  const regex = /[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}/g;\r\n  const res = str.match(regex);\r\n  return res ? res[0] : null;\r\n};\r\n\r\n// Create WebSocket connection.\r\nconst socket = new WebSocket(`ws://${host.replace(/^https?:\\/\\//i, \"\")}`);\r\n\r\nlet uid = \"\";\r\n\r\n// Listen for messages\r\nsocket.addEventListener(\"message\", function (event) {\r\n  if (isUid(event.data)) {\r\n    uid = isUid(event.data);\r\n  }\r\n  if (isJson(event.data)) {\r\n  }\r\n  console.log(\"Message from server \", event.data);\r\n});\r\n\r\nexport const downloadFileFromUrl = async videoDownloadUrl => {\r\n  try {\r\n    socket.send(uid);\r\n    axios({\r\n      url: videoDownloadUrl,\r\n      method: \"POST\",\r\n      responseType: \"blob\",\r\n      data: { uid: uid },\r\n      onDownloadProgress: progressEvent => {\r\n        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n        console.log(progressEvent.lengthComputable);\r\n        console.log(percentCompleted);\r\n      },\r\n    }).then(response => {\r\n      const fileName = extractFileName(response.headers[\"content-disposition\"]);\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n\r\n      link.click();\r\n      link.remove();\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Card from \"./components/Card\";\nimport { getInfos, getSuggestions, downloadFileFromUrl } from \"./utils/API\";\nimport { getDownloadUrl, isYtUrl } from \"./utils/helpers\";\n// import { ProgressBar } from \"react-bootstrap\";\n\nconst formats = [\n  {\n    id: \"mp4\",\n    name: \"mp4\",\n    isChecked: true,\n  },\n  {\n    id: \"mp3\",\n    name: \"mp3\",\n  },\n  {\n    id: \"mov\",\n    name: \"mov\",\n  },\n  {\n    id: \"flv\",\n    name: \"flv\",\n  },\n];\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [downloadFormat, setDownloadFormat] = useState(\"mp4\");\n  const [suggestions, setSuggestions] = useState<any>([]);\n  const [currentVideoInfo, setCurrentVideoInfo] = useState<any>(null);\n  const [focus, setFocus] = useState(false);\n\n  const checkInput = () => {\n    if (isYtUrl(inputText)) {\n      download(inputText);\n    } else {\n      fetchSuggestions();\n    }\n  };\n\n  const fetchSuggestions = async () => {\n    try {\n      const { data, success } = await getSuggestions(inputText);\n      if (success) {\n        setSuggestions(data);\n        setCurrentVideoInfo(undefined);\n      }\n    } catch (err) {}\n  };\n\n  const download = async (videoId: string) => {\n    const videoUrl = videoId || inputText;\n    if (!videoUrl) return;\n    const { data, success } = await getInfos(videoUrl);\n    if (success) {\n      const downloadUrl = getDownloadUrl(videoUrl, downloadFormat);\n\n      setCurrentVideoInfo(data.videoDetails);\n      downloadFileFromUrl(downloadUrl);\n      console.log(\"Starting download . . .\");\n    }\n  };\n\n  return (\n    <>\n      <main className=\"container\">\n        <section className=\"search-section\">\n          <div className={`input-container ${focus ? \"animate\" : \"\"}`}>\n            <input\n              type=\"text\"\n              name=\"input\"\n              id=\"text\"\n              placeholder=\"Search or paste url\"\n              spellCheck={false}\n              autoComplete=\"off\"\n              onBlur={() => setFocus(false)}\n              onFocus={() => setFocus(true)}\n              value={inputText}\n              onChange={e => setInputText(e.target.value)}\n              autoFocus\n            />\n          </div>\n          <br />\n          {/* <ProgressBar striped variant=\"success\" now={40} label=\"Initializing . . .\" style={{ width: \"85%\", height: \"20px\" }} /> */}\n          <ul className=\"format-list\">\n            {formats.map(format => {\n              return (\n                <li key={format.id}>\n                  <input\n                    type=\"radio\"\n                    id={format.id}\n                    name=\"format\"\n                    checked={downloadFormat === format.id}\n                    value={format.name}\n                    onChange={e => setDownloadFormat(e.target.value)}\n                  />\n                  <label htmlFor={format.id} className=\"radio-label\">\n                    {format.name}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n          <Button onClick={checkInput} />\n        </section>\n        {currentVideoInfo && (\n          <section className=\"downloading-section\">\n            <div>\n              <h2>{currentVideoInfo.title}</h2>\n              <br />\n              <img src={`https://i.ytimg.com/vi/${currentVideoInfo.videoId}/hqdefault.jpg`} alt={currentVideoInfo.title} />\n            </div>\n          </section>\n        )}\n        <section className=\"suggestions-section\">\n          {!!suggestions.length && <h1>Suggestions</h1>}\n          <div className=\"grid\">\n            {suggestions.map((video: any) => {\n              const { snippet: s } = video;\n              return (\n                <Card\n                  key={video.id.videoId}\n                  title={s.title}\n                  videoId={video.id.videoId}\n                  description={s.description}\n                  thumbnailUrl={s.thumbnails.medium.url}\n                  handleDownload={() => download(video.id.videoId)}\n                />\n              );\n            })}\n          </div>\n        </section>\n      </main>\n      <footer className=\"footer\"></footer>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}