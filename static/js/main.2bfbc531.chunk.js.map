{"version":3,"sources":["components/Button.tsx","components/Card.tsx","utils/helpers.js","utils/API.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","onClick","className","Card","title","videoId","thumbnailUrl","description","handleDownload","href","rel","target","style","backgroundImage","React","memo","host","getDownloadUrl","format","API","axios","create","baseURL","responseType","getSuggestions","searchQuery","a","get","data","getInfos","url","formats","id","name","isChecked","App","useState","inputText","setInputText","downloadUrl","setDownloadUrl","downloadFormat","setDownloadFormat","suggestions","setSuggestions","downloads","setDownloads","currentVideoInfo","setCurrentVideoInfo","focus","setFocus","hiddenDownloadBtn","useRef","isFirstRun","fetchSuggestions","success","undefined","download","videoUrl","videoInfo","videoDetails","useEffect","current","click","console","log","type","placeholder","spellCheck","autoComplete","onBlur","onFocus","value","onChange","e","autoFocus","map","checked","htmlFor","RegExp","test","src","alt","length","video","s","snippet","thumbnails","medium","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bfbc531.chunk.js","sourcesContent":["interface IButtonProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst Button = ({ onClick }: IButtonProps) => {\r\n  return (\r\n    <>\r\n      <button className=\"btn-animate\" onClick={onClick}>\r\n        Search\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\ninterface ICardProps {\r\n  title: string;\r\n  videoId: string;\r\n  description: string;\r\n  thumbnailUrl: string;\r\n  handleDownload: (videoId: string) => void;\r\n}\r\n\r\nconst Card = ({ title, videoId, description, thumbnailUrl, handleDownload }: ICardProps) => {\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <a href={`https://youtube.com/watch?v=${videoId}`} rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <div className=\"image\" style={{ backgroundImage: `url(${thumbnailUrl})` }}></div>\r\n          <div className=\"title\">{title}</div>\r\n        </a>\r\n        <button onClick={() => handleDownload(videoId)} className=\"download\">\r\n          Download\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Card);\r\n","// Requires to have the local backend if you wanna run backend\r\n// export const host = \"http://localhost:4000\";\r\nexport const host = \"https://shirokatake-ytdl-backend.herokuapp.com\";\r\n\r\nexport const getDownloadUrl = (videoId, format = \"mp4\") => `${host}/download?v=${videoId}&format=${format}`;\r\n\r\nexport const secondsToMinutes = time => {\r\n  return Math.floor(time / 60) + \":\" + Math.floor(time % 60);\r\n};\r\n\r\nexport const isYtUrl = url => {\r\n  const ytRegex = new RegExp(\r\n    /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(\\?\\S*)?$/\r\n  );\r\n  return ytRegex.test(url);\r\n};\r\n\r\nexport const changeFormatStorage = format => {\r\n  localStorage.setItem(\"format\", format);\r\n};\r\n","import axios from \"axios\";\r\nimport { host } from \"./helpers\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: host,\r\n  responseType: \"json\",\r\n});\r\n\r\nexport const getSuggestions = async searchQuery => {\r\n  const { data } = await API.get(`/suggestions?search=${searchQuery}`);\r\n  return data;\r\n};\r\n\r\nexport const getInfos = async url => {\r\n  const { data } = await API.get(`/metainfo?url=${url}`);\r\n  return data;\r\n};\r\n","import { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Card from \"./components/Card\";\nimport { getInfos, getSuggestions } from \"./utils/API\";\nimport { getDownloadUrl, isYtUrl } from \"./utils/helpers\";\n\nconst formats = [\n  {\n    id: \"mp4\",\n    name: \"mp4\",\n    isChecked: true,\n  },\n  {\n    id: \"mp3\",\n    name: \"mp3\",\n  },\n  {\n    id: \"mov\",\n    name: \"mov\",\n  },\n  {\n    id: \"flv\",\n    name: \"flv\",\n  },\n];\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [downloadUrl, setDownloadUrl] = useState(\"\");\n  const [downloadFormat, setDownloadFormat] = useState(\"mp4\");\n  const [suggestions, setSuggestions] = useState<any>([]);\n  const [downloads, setDownloads] = useState<any>([]);\n  const [currentVideoInfo, setCurrentVideoInfo] = useState<any>(null);\n  const [focus, setFocus] = useState(false);\n\n  const hiddenDownloadBtn = useRef<HTMLAnchorElement>(null);\n  const isFirstRun = useRef(true);\n\n  const checkInput = () => {\n    if (isYtUrl(inputText)) {\n      download(inputText);\n    } else {\n      fetchSuggestions();\n    }\n  };\n\n  const fetchSuggestions = async () => {\n    const { data, success } = await getSuggestions(inputText);\n    if (success) {\n      setSuggestions(data);\n      setCurrentVideoInfo(undefined);\n    }\n  };\n\n  const download = async (videoId: string) => {\n    const videoUrl = videoId || inputText;\n    if (!videoUrl) return;\n    const { data, success } = await getInfos(videoUrl);\n    if (success) {\n      const downloadUrl = getDownloadUrl(videoUrl, downloadFormat);\n      const videoInfo = {\n        title: data.videoDetails.title,\n        videoId: data.videoDetails.videoId,\n      };\n\n      setDownloadUrl(downloadUrl);\n      setCurrentVideoInfo(data.videoDetails);\n      setDownloads([...downloads, videoInfo]);\n    }\n  };\n\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n    hiddenDownloadBtn.current?.click();\n    console.log(\"download\");\n  }, [downloadUrl, downloads]);\n\n  return (\n    <>\n      <main className=\"container\">\n        <section className=\"search-section\">\n          <div className={`input-container ${focus ? \"animate\" : \"\"}`}>\n            <input\n              type=\"text\"\n              name=\"input\"\n              id=\"text\"\n              placeholder=\"Search or paste url\"\n              spellCheck={false}\n              autoComplete=\"off\"\n              onBlur={() => setFocus(false)}\n              onFocus={() => setFocus(true)}\n              value={inputText}\n              onChange={e => setInputText(e.target.value)}\n              autoFocus\n            />\n          </div>\n          <ul className=\"format-list\">\n            {formats.map(format => {\n              return (\n                <li key={format.id}>\n                  <input\n                    type=\"radio\"\n                    id={format.id}\n                    name=\"format\"\n                    checked={downloadFormat === format.id}\n                    value={format.name}\n                    onChange={e => setDownloadFormat(e.target.value)}\n                  />\n                  <label htmlFor={format.id} className=\"radio-label\">\n                    {format.name}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n          <Button onClick={checkInput} />\n        </section>\n        {currentVideoInfo && (\n          <section className=\"downloading-section\">\n            <div>\n              <h2>{currentVideoInfo.title}</h2>\n              <img src={`https://i.ytimg.com/vi/${currentVideoInfo.videoId}/hqdefault.jpg`} alt={currentVideoInfo.title} />\n            </div>\n          </section>\n        )}\n        <section className=\"suggestions-section\">\n          {!!suggestions.length && <h1>Suggestions</h1>}\n          <div className=\"grid\">\n            {suggestions.map((video: any) => {\n              const { snippet: s } = video;\n              return (\n                <Card\n                  key={video.id.videoId}\n                  title={s.title}\n                  videoId={video.id.videoId}\n                  description={s.description}\n                  thumbnailUrl={s.thumbnails.medium.url}\n                  handleDownload={() => download(video.id.videoId)}\n                />\n              );\n            })}\n          </div>\n        </section>\n      </main>\n      <footer className=\"footer\"></footer>\n      <a href={downloadUrl} download className=\"hidden\" ref={hiddenDownloadBtn}>\n        {downloadUrl}\n      </a>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}