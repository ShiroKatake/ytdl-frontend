{"version":3,"sources":["components/Button/Button.tsx","components/FormatList/FormatList.tsx","components/TextInput/TextInput.tsx","components/Card/Card.tsx","utils/helpers.js","utils/API.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","main","children","isLoading","onClick","disabled","className","formats","id","name","isChecked","FormatList","downloadFormat","setDownloadFormat","map","format","type","checked","value","onChange","e","target","htmlFor","TextInput","inputText","setInputText","useState","focus","setFocus","placeholder","spellCheck","autoComplete","onBlur","onFocus","autoFocus","Card","author","title","videoId","thumbnailUrl","description","handleDownload","href","rel","style","backgroundImage","he","decode","React","memo","host","getDownloadUrl","isJson","str","JSON","parse","waitForOpenConnection","socket","Promise","resolve","reject","currentAttempt","interval","setInterval","maxNumberOfAttempts","clearInterval","Error","readyState","OPEN","isUid","res","match","toMB","i","toFixed","API","axios","create","baseURL","responseType","getSuggestions","searchQuery","a","get","response","data","console","log","getInfos","url","downloadFileFromUrl","videoDownloadUrl","uid","setDownloadProgress","method","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","then","fileName","headers","exec","window","URL","createObjectURL","Blob","link","document","createElement","setAttribute","body","appendChild","click","remove","App","suggestions","setSuggestions","currentVideoInfo","setCurrentVideoInfo","setIsLoading","downloadProgress","hidden","setHidden","downloaded","setDownloaded","totalSize","setTotalSize","checkInput","RegExp","test","download","fetchSuggestions","success","undefined","videoUrl","downloadUrl","WebSocket","replace","addEventListener","event","send","error","videoDetails","setTimeout","ProgressBar","striped","variant","now","label","text","progressText","width","height","lineHeight","src","alt","length","video","bestThumbnail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc83aa5c.chunk.js","sourcesContent":["import \"./Button.css\";\r\n\r\ninterface IButtonProps {\r\n  main?: boolean;\r\n  children: string;\r\n  isLoading: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const Button = ({ main, children, isLoading, onClick }: IButtonProps) => {\r\n  return (\r\n    <button disabled={isLoading} className={`btn-animate ${main ? \"main\" : \"\"} ${isLoading ? \"loading\" : \"\"}`} onClick={onClick}>\r\n      <p>{children}</p>\r\n      <div className=\"spinner\" />\r\n    </button>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport \"./FormatList.css\";\r\n\r\nconst formats = [\r\n  {\r\n    id: \"mp4\",\r\n    name: \"mp4\",\r\n    isChecked: true,\r\n  },\r\n  {\r\n    id: \"mp3\",\r\n    name: \"mp3\",\r\n  },\r\n  {\r\n    id: \"mov\",\r\n    name: \"mov\",\r\n  },\r\n  {\r\n    id: \"flv\",\r\n    name: \"flv\",\r\n  },\r\n];\r\n\r\ninterface IFormatListProps {\r\n  downloadFormat: string;\r\n  setDownloadFormat: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const FormatList = ({ downloadFormat, setDownloadFormat }: IFormatListProps) => {\r\n  return (\r\n    <ul className=\"format-list\">\r\n      {formats.map(format => {\r\n        return (\r\n          <li key={format.id}>\r\n            <input\r\n              type=\"radio\"\r\n              id={format.id}\r\n              name=\"format\"\r\n              checked={downloadFormat === format.id}\r\n              value={format.name}\r\n              onChange={e => setDownloadFormat(e.target.value)}\r\n            />\r\n            <label htmlFor={format.id} className=\"radio-label\">\r\n              {format.name}\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport \"./TextInput.css\";\r\n\r\ninterface ITextInputProps {\r\n  inputText: string;\r\n  setInputText: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const TextInput = ({ inputText, setInputText }: ITextInputProps) => {\r\n  const [focus, setFocus] = useState(false);\r\n\r\n  return (\r\n    <div className={`input-container ${focus ? \"animate\" : \"\"}`}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"input\"\r\n        id=\"text\"\r\n        placeholder=\"Search or paste url\"\r\n        spellCheck={false}\r\n        autoComplete=\"off\"\r\n        onBlur={() => setFocus(false)}\r\n        onFocus={() => setFocus(true)}\r\n        value={inputText}\r\n        onChange={e => setInputText(e.target.value)}\r\n        autoFocus\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport he from \"he\";\r\nimport { Button } from \"..\";\r\nimport \"./Card.css\";\r\n\r\ninterface ICardProps {\r\n  isLoading: boolean;\r\n  author: string;\r\n  title: string;\r\n  videoId: string;\r\n  description?: string;\r\n  thumbnailUrl: string;\r\n  handleDownload: (videoId: string) => void;\r\n}\r\n\r\nconst Card = ({ isLoading, author, title, videoId, description, thumbnailUrl, handleDownload }: ICardProps) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <a href={`https://youtube.com/watch?v=${videoId}`} rel=\"noopener noreferrer\" target=\"_blank\">\r\n        <div className=\"image\" style={{ backgroundImage: `url(${thumbnailUrl})` }}></div>\r\n        <div className=\"title\">{author + \" - \" + he.decode(title)}</div>\r\n      </a>\r\n      <Button isLoading={isLoading} onClick={() => handleDownload(videoId)}>\r\n        Download\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Card);\r\n","// Requires to have the local backend if you wanna run backend\r\n// export const host = \"http://localhost:4000\";\r\nexport const host = \"https://shirokatake-ytdl-backend.herokuapp.com\";\r\n\r\nexport const getDownloadUrl = (videoId, format = \"mp4\") => `${host}/download?v=${videoId}&format=${format}`;\r\n\r\nexport const secondsToMinutes = time => {\r\n  return Math.floor(time / 60) + \":\" + Math.floor(time % 60);\r\n};\r\n\r\nexport const isYtUrl = url => {\r\n  const ytRegex = new RegExp(\r\n    /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((?:\\w|-){11})(?:&\\S*)?(?:\\?\\S*)?$/\r\n  );\r\n  return ytRegex.test(url); //Change to .match() to debug\r\n};\r\n\r\nexport const changeFormatStorage = format => {\r\n  localStorage.setItem(\"format\", format);\r\n};\r\n\r\nexport const extractFileName = str => {\r\n  const regex = /.*filename=['\"]?([^\"]+)/g;\r\n  return regex.exec(str)[1];\r\n};\r\n\r\nexport const isJson = str => {\r\n  try {\r\n    JSON.parse(str);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const waitForOpenConnection = socket => {\r\n  return new Promise((resolve, reject) => {\r\n    const maxNumberOfAttempts = 10;\r\n    const intervalTime = 200; //ms\r\n\r\n    let currentAttempt = 0;\r\n    const interval = setInterval(() => {\r\n      if (currentAttempt > maxNumberOfAttempts - 1) {\r\n        clearInterval(interval);\r\n        reject(new Error(\"Maximum number of attempts exceeded\"));\r\n      } else if (socket.readyState === socket.OPEN) {\r\n        clearInterval(interval);\r\n        resolve();\r\n      }\r\n      currentAttempt++;\r\n    }, intervalTime);\r\n  });\r\n};\r\n\r\nexport const isUid = str => {\r\n  const regex = /[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}/g;\r\n  const res = str.match(regex);\r\n  return res ? res[0] : null;\r\n};\r\n\r\nexport const toMB = i => (i / 1024 / 1024).toFixed(2);\r\n","import axios from \"axios\";\r\nimport { host, extractFileName } from \"./helpers\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: host,\r\n  responseType: \"json\",\r\n});\r\n\r\nexport const getSuggestions = async searchQuery => {\r\n  try {\r\n    const response = await API.get(`/suggestions?search=${searchQuery}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getInfos = async url => {\r\n  try {\r\n    const response = await API.get(`/metainfo?url=${url}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const downloadFileFromUrl = async (videoDownloadUrl, uid, setDownloadProgress) => {\r\n  try {\r\n    await axios({\r\n      url: videoDownloadUrl,\r\n      method: \"POST\",\r\n      responseType: \"blob\",\r\n      data: { uid: uid },\r\n      onDownloadProgress: progressEvent => {\r\n        let percentCompleted = 75 + Math.round((progressEvent.loaded * 100) / progressEvent.total) * 0.25;\r\n        setDownloadProgress(percentCompleted);\r\n        console.log(percentCompleted);\r\n      },\r\n    }).then(response => {\r\n      const fileName = extractFileName(response.headers[\"content-disposition\"]);\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n\r\n      link.click();\r\n      link.remove();\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, FormatList, TextInput } from \"./components\";\nimport Card from \"./components/Card/Card\";\nimport { getInfos, getSuggestions, downloadFileFromUrl } from \"./utils/API\";\nimport { host, isYtUrl, getDownloadUrl, isJson, isUid, waitForOpenConnection, toMB } from \"./utils/helpers\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [downloadFormat, setDownloadFormat] = useState(\"mp4\");\n  const [suggestions, setSuggestions] = useState<any>([]);\n  const [currentVideoInfo, setCurrentVideoInfo] = useState<any>(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [downloadProgress, setDownloadProgress] = useState(0);\n  const [hidden, setHidden] = useState(true);\n\n  const [downloaded, setDownloaded] = useState(0);\n  const [totalSize, setTotalSize] = useState(1);\n\n  const checkInput = async () => {\n    if (isYtUrl(inputText)) {\n      await download(inputText);\n    } else {\n      await fetchSuggestions();\n    }\n  };\n\n  const fetchSuggestions = async () => {\n    try {\n      setIsLoading(true);\n      const { data, success } = await getSuggestions(inputText);\n      if (success) {\n        setSuggestions(data);\n        setCurrentVideoInfo(undefined);\n      }\n      setIsLoading(false);\n    } catch (err) {}\n  };\n\n  const download = async (videoId: string) => {\n    setIsLoading(true);\n    setHidden(false);\n    const videoUrl = videoId || inputText;\n    if (!videoUrl) return;\n    const { data, success } = await getInfos(videoUrl);\n    if (success) {\n      const downloadUrl = getDownloadUrl(videoUrl, downloadFormat);\n\n      // Create WebSocket connection.\n      const socket = new WebSocket(`${host.replace(/^https?/i, \"wss\")}`);\n\n      let uid = \"\";\n\n      // Listen for messages\n      socket.addEventListener(\"message\", event => {\n        if (isUid(event.data)) {\n          uid = isUid(event.data);\n        }\n        if (isJson(event.data)) {\n          const downloadProgress = JSON.parse(event.data);\n          setDownloadProgress((downloadProgress.downloaded / downloadProgress.total) * 75);\n          setDownloaded(downloadProgress.downloaded);\n          setTotalSize(downloadProgress.total);\n        }\n      });\n\n      if (socket.readyState !== socket.OPEN) {\n        try {\n          await waitForOpenConnection(socket);\n          socket.send(uid);\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        socket.send(uid);\n      }\n\n      setCurrentVideoInfo(data.videoDetails);\n      console.log(\"Starting download . . .\");\n      await downloadFileFromUrl(downloadUrl, uid, setDownloadProgress);\n      setIsLoading(false);\n      setTimeout(() => {\n        setHidden(true);\n        setDownloadProgress(0);\n      }, 5000);\n    }\n  };\n\n  const progressText = (downloadProgress: number) => {\n    let text = \"Fetching . . .\";\n    if (downloadProgress > 75) {\n      text = \"Preparing download . . .\";\n    }\n    if (downloadProgress === 100) {\n      text = \"Ready!\";\n    }\n    return text;\n  };\n\n  return (\n    <>\n      <section className=\"search-section\">\n        <TextInput inputText={inputText} setInputText={setInputText} />\n        <ProgressBar\n          hidden={hidden}\n          striped\n          variant=\"success\"\n          now={downloadProgress}\n          label={`${progressText(downloadProgress)} ${toMB(downloaded)}MB /${toMB(totalSize)}MB`}\n          style={{ width: \"85%\", height: \"30px\", lineHeight: \"30px\" }}\n        />\n        <FormatList downloadFormat={downloadFormat} setDownloadFormat={setDownloadFormat} />\n        <Button main isLoading={isLoading} onClick={checkInput}>\n          Search\n        </Button>\n      </section>\n      {currentVideoInfo && (\n        <section className=\"downloading-section\">\n          <div>\n            <h2>{currentVideoInfo.title}</h2>\n            <br />\n            <img src={`https://i.ytimg.com/vi/${currentVideoInfo.videoId}/hqdefault.jpg`} alt={currentVideoInfo.title} />\n          </div>\n        </section>\n      )}\n      <section className=\"suggestions-section\">\n        {!!suggestions.length && <h1>Suggestions</h1>}\n        <div className=\"grid\">\n          {suggestions.map((video: any) => {\n            return (\n              <Card\n                key={video.id}\n                isLoading={isLoading}\n                author={video.author.name}\n                title={video.title}\n                videoId={video.id}\n                thumbnailUrl={video.bestThumbnail.url}\n                handleDownload={() => download(video.id)}\n              />\n            );\n          })}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}