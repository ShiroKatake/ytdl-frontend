{"version":3,"sources":["components/Button.tsx","components/Card.tsx","utils/helpers.js","utils/API.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","onClick","className","Card","title","videoId","thumbnailUrl","description","handleDownload","href","rel","target","style","backgroundImage","he","decode","React","memo","host","getDownloadUrl","format","API","axios","create","baseURL","responseType","getSuggestions","searchQuery","a","get","response","data","console","log","getInfos","url","downloadFileFromUrl","videoDownloadUrl","method","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","lengthComputable","then","str","fileName","headers","exec","window","URL","createObjectURL","Blob","link","document","createElement","setAttribute","body","appendChild","click","remove","error","formats","id","name","isChecked","App","useState","inputText","setInputText","downloadFormat","setDownloadFormat","suggestions","setSuggestions","downloads","setDownloads","currentVideoInfo","setCurrentVideoInfo","focus","setFocus","fetchSuggestions","success","undefined","download","videoUrl","downloadUrl","videoInfo","videoDetails","type","placeholder","spellCheck","autoComplete","onBlur","onFocus","value","onChange","e","autoFocus","map","checked","htmlFor","RegExp","test","src","alt","length","video","s","snippet","thumbnails","medium","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99034142.chunk.js","sourcesContent":["interface IButtonProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst Button = ({ onClick }: IButtonProps) => {\r\n  return (\r\n    <>\r\n      <button className=\"btn-animate\" onClick={onClick}>\r\n        Search\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport he from \"he\";\r\n\r\ninterface ICardProps {\r\n  title: string;\r\n  videoId: string;\r\n  description: string;\r\n  thumbnailUrl: string;\r\n  handleDownload: (videoId: string) => void;\r\n}\r\n\r\nconst Card = ({ title, videoId, description, thumbnailUrl, handleDownload }: ICardProps) => {\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <a href={`https://youtube.com/watch?v=${videoId}`} rel=\"noopener noreferrer\" target=\"_blank\">\r\n          <div className=\"image\" style={{ backgroundImage: `url(${thumbnailUrl})` }}></div>\r\n          <div className=\"title\">{he.decode(title)}</div>\r\n        </a>\r\n        <button onClick={() => handleDownload(videoId)} className=\"download\">\r\n          Download\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Card);\r\n","// Requires to have the local backend if you wanna run backend\r\n// export const host = \"http://localhost:4000\";\r\nexport const host = \"https://shirokatake-ytdl-backend.herokuapp.com\";\r\n\r\nexport const getDownloadUrl = (videoId, format = \"mp4\") => `${host}/download?v=${videoId}&format=${format}`;\r\n\r\nexport const secondsToMinutes = time => {\r\n  return Math.floor(time / 60) + \":\" + Math.floor(time % 60);\r\n};\r\n\r\nexport const isYtUrl = url => {\r\n  const ytRegex = new RegExp(\r\n    /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(\\?\\S*)?$/\r\n  );\r\n  return ytRegex.test(url);\r\n};\r\n\r\nexport const changeFormatStorage = format => {\r\n  localStorage.setItem(\"format\", format);\r\n};\r\n","import axios from \"axios\";\r\nimport { host } from \"./helpers\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: host,\r\n  responseType: \"json\",\r\n});\r\n\r\nexport const getSuggestions = async searchQuery => {\r\n  try {\r\n    const response = await API.get(`/suggestions?search=${searchQuery}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getInfos = async url => {\r\n  try {\r\n    const response = await API.get(`/metainfo?url=${url}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nconst extractFileName = str => {\r\n  const regex = /.*filename=['\"]?([^\"]+)/g;\r\n  return regex.exec(str)[1];\r\n};\r\n\r\nexport const downloadFileFromUrl = async videoDownloadUrl => {\r\n  try {\r\n    axios({\r\n      url: videoDownloadUrl,\r\n      method: \"GET\",\r\n      responseType: \"blob\",\r\n      onDownloadProgress: progressEvent => {\r\n        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n        console.log(progressEvent.lengthComputable);\r\n        console.log(percentCompleted);\r\n      },\r\n    }).then(response => {\r\n      const fileName = extractFileName(response.headers[\"content-disposition\"]);\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n\r\n      link.click();\r\n      link.remove();\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Card from \"./components/Card\";\nimport { getInfos, getSuggestions, downloadFileFromUrl } from \"./utils/API\";\nimport { getDownloadUrl, isYtUrl } from \"./utils/helpers\";\n// import { ProgressBar } from \"react-bootstrap\";\n\nconst formats = [\n  {\n    id: \"mp4\",\n    name: \"mp4\",\n    isChecked: true,\n  },\n  {\n    id: \"mp3\",\n    name: \"mp3\",\n  },\n  {\n    id: \"mov\",\n    name: \"mov\",\n  },\n  {\n    id: \"flv\",\n    name: \"flv\",\n  },\n];\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [downloadFormat, setDownloadFormat] = useState(\"mp4\");\n  const [suggestions, setSuggestions] = useState<any>([]);\n  const [downloads, setDownloads] = useState<any>([]);\n  const [currentVideoInfo, setCurrentVideoInfo] = useState<any>(null);\n  const [focus, setFocus] = useState(false);\n\n  const checkInput = () => {\n    if (isYtUrl(inputText)) {\n      download(inputText);\n    } else {\n      fetchSuggestions();\n    }\n  };\n\n  const fetchSuggestions = async () => {\n    try {\n      const { data, success } = await getSuggestions(inputText);\n      if (success) {\n        setSuggestions(data);\n        setCurrentVideoInfo(undefined);\n      }\n    } catch (err) {}\n  };\n\n  const download = async (videoId: string) => {\n    const videoUrl = videoId || inputText;\n    if (!videoUrl) return;\n    const { data, success } = await getInfos(videoUrl);\n    if (success) {\n      const downloadUrl = getDownloadUrl(videoUrl, downloadFormat);\n      const videoInfo = {\n        title: data.videoDetails.title,\n        videoId: data.videoDetails.videoId,\n      };\n\n      setCurrentVideoInfo(data.videoDetails);\n      setDownloads([...downloads, videoInfo]);\n      downloadFileFromUrl(downloadUrl);\n      console.log(\"Starting download . . .\");\n    }\n  };\n\n  return (\n    <>\n      <main className=\"container\">\n        <section className=\"search-section\">\n          <div className={`input-container ${focus ? \"animate\" : \"\"}`}>\n            <input\n              type=\"text\"\n              name=\"input\"\n              id=\"text\"\n              placeholder=\"Search or paste url\"\n              spellCheck={false}\n              autoComplete=\"off\"\n              onBlur={() => setFocus(false)}\n              onFocus={() => setFocus(true)}\n              value={inputText}\n              onChange={e => setInputText(e.target.value)}\n              autoFocus\n            />\n          </div>\n          <br />\n          {/* <ProgressBar striped variant=\"success\" now={40} label=\"Initializing . . .\" style={{ width: \"85%\", height: \"20px\" }} /> */}\n          <ul className=\"format-list\">\n            {formats.map(format => {\n              return (\n                <li key={format.id}>\n                  <input\n                    type=\"radio\"\n                    id={format.id}\n                    name=\"format\"\n                    checked={downloadFormat === format.id}\n                    value={format.name}\n                    onChange={e => setDownloadFormat(e.target.value)}\n                  />\n                  <label htmlFor={format.id} className=\"radio-label\">\n                    {format.name}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n          <Button onClick={checkInput} />\n        </section>\n        {currentVideoInfo && (\n          <section className=\"downloading-section\">\n            <div>\n              <h2>{currentVideoInfo.title}</h2>\n              <br />\n              <img src={`https://i.ytimg.com/vi/${currentVideoInfo.videoId}/hqdefault.jpg`} alt={currentVideoInfo.title} />\n            </div>\n          </section>\n        )}\n        <section className=\"suggestions-section\">\n          {!!suggestions.length && <h1>Suggestions</h1>}\n          <div className=\"grid\">\n            {suggestions.map((video: any) => {\n              const { snippet: s } = video;\n              return (\n                <Card\n                  key={video.id.videoId}\n                  title={s.title}\n                  videoId={video.id.videoId}\n                  description={s.description}\n                  thumbnailUrl={s.thumbnails.medium.url}\n                  handleDownload={() => download(video.id.videoId)}\n                />\n              );\n            })}\n          </div>\n        </section>\n      </main>\n      <footer className=\"footer\"></footer>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}