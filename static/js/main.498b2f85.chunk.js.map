{"version":3,"sources":["components/Button/Button.tsx","components/Card/Card.tsx","components/FormatList/FormatList.tsx","components/TextInput/TextInput.tsx","components/Playlist/Playlist.tsx","utils/helpers.js","utils/API.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","main","children","isLoading","onClick","disabled","className","Card","suggestions","download","map","video","href","id","rel","target","style","backgroundImage","bestThumbnail","url","author","name","he","decode","title","formats","FormatList","downloadFormat","setDownloadFormat","format","type","checked","value","onChange","e","htmlFor","TextInput","inputText","setInputText","useState","focus","setFocus","placeholder","spellCheck","autoComplete","onBlur","onFocus","autoFocus","Playlist","playlist","initialChecked","initialIdList","checkedAll","setCheckedAll","setChecked","useEffect","allChecked","index","console","log","scope","state","prevState","width","src","alt","newState","checkOnce","host","window","location","hostname","websocketProtocol","generateDownloadUrl","videoId","getYtUrl","regex","RegExp","match","isJson","str","JSON","parse","waitForOpenConnection","socket","Promise","resolve","reject","currentAttempt","interval","setInterval","maxNumberOfAttempts","clearInterval","Error","readyState","OPEN","isUid","res","generateProgressText","downloadProgress","downloaded","totalSize","text","toMB","i","toFixed","API","axios","create","baseURL","responseType","getSuggestions","searchQuery","a","get","response","data","getInfos","getPlaylist","plId","downloadFileFromUrl","videoDownloadUrl","uid","setDownloadProgress","fileName","method","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","then","URL","createObjectURL","Blob","link","document","createElement","setAttribute","body","appendChild","click","remove","App","localStorage","getItem","setSuggestions","currentVideoInfo","setCurrentVideoInfo","playlistInfo","setPlaylistInfo","setIsLoading","hidden","setHidden","setDownloaded","setTotalSize","setItem","checkInput","ytId","test","fetchPlaylist","fetchSuggestions","success","undefined","videoUrl","downloadUrl","WebSocket","replace","addEventListener","event","send","error","videoDetails","filename","setTimeout","ProgressBar","striped","variant","now","label","height","lineHeight","length","items","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.498b2f85.chunk.js","sourcesContent":["import { IoMdDownload } from \"react-icons/io\";\r\nimport \"./Button.css\";\r\n\r\ninterface IButtonProps {\r\n  main?: boolean;\r\n  children?: string;\r\n  isLoading: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const Button = ({ main, children, isLoading, onClick }: IButtonProps) => {\r\n  return (\r\n    <button disabled={isLoading} className={`btn-animate ${main ? \"main\" : \"\"} ${isLoading ? \"loading\" : \"\"}`} onClick={onClick}>\r\n      <span>{children ? children : <IoMdDownload />}</span>\r\n      <div className=\"spinner\" />\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport he from \"he\";\r\nimport { Button } from \"..\";\r\nimport \"./Card.css\";\r\n\r\ninterface ICardProps {\r\n  suggestions: any[];\r\n  isLoading: boolean;\r\n  download: (videoId: string) => void;\r\n}\r\n\r\nexport const Card = ({ suggestions, isLoading, download }: ICardProps) => {\r\n  return (\r\n    <div className=\"grid\">\r\n      {suggestions.map((video: any) => {\r\n        return (\r\n          <div key={video.id} className=\"card\">\r\n            <a href={`https://youtube.com/watch?v=${video.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\r\n              <div className=\"image\" style={{ backgroundImage: `url(${video.bestThumbnail.url})` }}></div>\r\n              <div className=\"title\">{video.author.name + \" - \" + he.decode(video.title)}</div>\r\n            </a>\r\n            <Button isLoading={isLoading} onClick={() => download(video.id)}>\r\n              Download\r\n            </Button>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import \"./FormatList.css\";\r\n\r\nconst formats = [\r\n  {\r\n    id: \"mp4\",\r\n    name: \"mp4\",\r\n  },\r\n  {\r\n    id: \"mp3\",\r\n    name: \"mp3\",\r\n  },\r\n];\r\n\r\ninterface IFormatListProps {\r\n  downloadFormat: string | null;\r\n  setDownloadFormat: (format: string) => void;\r\n}\r\n\r\nexport const FormatList = ({ downloadFormat, setDownloadFormat }: IFormatListProps) => {\r\n  return (\r\n    <ul className=\"format-list\">\r\n      {formats.map(format => {\r\n        return (\r\n          <li key={format.id}>\r\n            <input\r\n              type=\"radio\"\r\n              id={format.id}\r\n              name=\"format\"\r\n              checked={downloadFormat === format.id}\r\n              value={format.id}\r\n              onChange={e => setDownloadFormat(e.target.value)}\r\n            />\r\n            <label htmlFor={format.id} className=\"radio-label\">\r\n              {format.name}\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport \"./TextInput.css\";\r\n\r\ninterface ITextInputProps {\r\n  inputText: string;\r\n  setInputText: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const TextInput = ({ inputText, setInputText }: ITextInputProps) => {\r\n  const [focus, setFocus] = useState(false);\r\n\r\n  return (\r\n    <div className={`input-container ${focus ? \"animate\" : \"\"}`}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"input\"\r\n        id=\"text\"\r\n        placeholder=\"Search or paste url\"\r\n        spellCheck={false}\r\n        autoComplete=\"off\"\r\n        onBlur={() => setFocus(false)}\r\n        onFocus={() => setFocus(true)}\r\n        value={inputText}\r\n        onChange={e => setInputText(e.target.value)}\r\n        autoFocus\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import he from \"he\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button } from \"..\";\r\nimport \"./Playlist.css\";\r\n\r\ninterface IPlaylistProps {\r\n  playlist: any[];\r\n  isLoading: boolean;\r\n  download: (videoId: string) => void;\r\n}\r\n\r\ninterface ICheckbox {\r\n  [key: number]: boolean;\r\n}\r\n\r\ninterface IPlaylistObject {\r\n  [key: number]: string;\r\n}\r\n\r\nexport const Playlist = ({ playlist: suggestions, isLoading, download }: IPlaylistProps) => {\r\n  const initialChecked: ICheckbox = {};\r\n  const initialIdList: IPlaylistObject = {};\r\n  const [checkedAll, setCheckedAll] = useState(false);\r\n  const [checked, setChecked] = useState(initialChecked);\r\n\r\n  const checkOnce = (index: number) => {\r\n    setChecked((prevState: any) => {\r\n      const newState = { ...prevState };\r\n      newState[index] = !prevState[index];\r\n      return newState;\r\n    });\r\n    console.log(initialIdList);\r\n  };\r\n\r\n  const checkAll = (state: boolean) => {\r\n    setCheckedAll(state);\r\n    setChecked((prevState: any) => {\r\n      for (const index in prevState) {\r\n        prevState[index] = state;\r\n      }\r\n      return prevState;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let allChecked = true;\r\n    for (const index in checked) {\r\n      if (checked[index] !== allChecked) {\r\n        allChecked = false;\r\n        break;\r\n      }\r\n    }\r\n    setCheckedAll(allChecked);\r\n    console.log(checked);\r\n  }, [checked]);\r\n\r\n  return (\r\n    <div className=\"playlist\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Thumbnail</th>\r\n            <th scope=\"col\">Title</th>\r\n            <th scope=\"col\">Download</th>\r\n            <th scope=\"col\">\r\n              <div>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={checkedAll}\r\n                  id=\"selectAll\"\r\n                  onChange={() => checkAll(!checkedAll)}\r\n                />\r\n                <label className=\"checkbox-label\"> Select</label>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {suggestions.map((video: any, index: number) => {\r\n            initialChecked[index] = false;\r\n            initialIdList[index] = video.id;\r\n            return (\r\n              <tr key={video.id}>\r\n                <td>{index + 1}</td>\r\n                <td>\r\n                  <img width=\"100\" src={video.bestThumbnail.url} alt={video.title} />\r\n                </td>\r\n                <td>{he.decode(video.title)}</td>\r\n                <td>\r\n                  <Button isLoading={isLoading} onClick={() => download(video.id)} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={checked[index]}\r\n                    onChange={() => {\r\n                      checkOnce(index);\r\n                    }}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"download-selected-btn\">\r\n        <Button isLoading={isLoading} onClick={() => download(\"video.id\")}>\r\n          Download Selected\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const host = window.location.hostname === \"localhost\" ? \"http://localhost:4000\" : \"https://shirokatake-ytdl-backend.herokuapp.com\";\r\n\r\nexport const websocketProtocol = window.location.hostname === \"localhost\" ? \"ws\" : \"wss\";\r\n\r\nexport const generateDownloadUrl = (videoId, format = \"mp4\") => `${host}/download?v=${videoId}&format=${format}`;\r\n\r\nexport const getYtUrl = url => {\r\n  const regex = new RegExp(\r\n    /^(?:https?:\\/\\/)?(?:music\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((?:\\w|-){11})(?:&\\S*)?(?:\\?\\S*)?$/\r\n  );\r\n  return url.match(regex)[1]; //Change to .match() to debug\r\n};\r\n\r\nexport const isYtList = url => {\r\n  const regex = new RegExp(/^https?:\\/\\/(?:music\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/)playlist\\?list=([a-zA-Z0-9\\-_]{34})$/);\r\n  return regex.test(url);\r\n};\r\n\r\nexport const isYtMixList = url => {\r\n  const regex = new RegExp(/https?:\\/\\/(?:music\\.|www\\.)?(?:youtu\\.?be\\/|youtube\\.com\\/)(?:watch\\?v=[a-zA-Z0-9]*&)?list=([a-zA-Z0-9\\-_]{13})&?/);\r\n  return regex.test(url);\r\n};\r\n\r\nexport const isJson = str => {\r\n  try {\r\n    JSON.parse(str);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const waitForOpenConnection = socket => {\r\n  return new Promise((resolve, reject) => {\r\n    const maxNumberOfAttempts = 10;\r\n    const intervalTime = 200; //ms\r\n\r\n    let currentAttempt = 0;\r\n    const interval = setInterval(() => {\r\n      if (currentAttempt > maxNumberOfAttempts - 1) {\r\n        clearInterval(interval);\r\n        reject(new Error(\"Maximum number of attempts exceeded\"));\r\n      } else if (socket.readyState === socket.OPEN) {\r\n        clearInterval(interval);\r\n        resolve();\r\n      }\r\n      currentAttempt++;\r\n    }, intervalTime);\r\n  });\r\n};\r\n\r\nexport const isUid = str => {\r\n  const regex = /[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}/g;\r\n  const res = str.match(regex);\r\n  return res ? res[0] : null;\r\n};\r\n\r\nexport const generateProgressText = (downloadProgress, downloaded, totalSize) => {\r\n  let text = `Fetching . . . ${toMB(downloaded)}MB / `;\r\n  if (downloadProgress > 75) {\r\n    text = \"Preparing download . . . \";\r\n  }\r\n  if (downloadProgress === 100) {\r\n    text = \"Ready! \";\r\n  }\r\n  return text + `${toMB(totalSize)}MB`;\r\n};\r\n\r\nexport const toMB = i => (i / 1024 / 1024).toFixed(2);\r\n","import axios from \"axios\";\r\nimport { host } from \"./helpers\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: host,\r\n  responseType: \"json\",\r\n});\r\n\r\nexport const getSuggestions = async searchQuery => {\r\n  try {\r\n    const response = await API.get(`/suggestions?search=${searchQuery}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getInfos = async url => {\r\n  try {\r\n    const response = await API.get(`/metainfo?url=${url}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const getPlaylist = async plId => {\r\n  try {\r\n    const response = await API.get(`/playlist?pl=${plId}`);\r\n    const { data } = response;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.response.data);\r\n  }\r\n};\r\n\r\nexport const downloadFileFromUrl = async (videoDownloadUrl, uid, setDownloadProgress, fileName) => {\r\n  try {\r\n    await axios({\r\n      url: videoDownloadUrl,\r\n      method: \"POST\",\r\n      responseType: \"blob\",\r\n      data: { uid: uid },\r\n      onDownloadProgress: progressEvent => {\r\n        let percentCompleted = 75 + Math.round((progressEvent.loaded * 100) / progressEvent.total) * 0.25;\r\n        setDownloadProgress(percentCompleted);\r\n      },\r\n    }).then(response => {\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n\r\n      link.click();\r\n      link.remove();\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Card, FormatList, Playlist, TextInput } from \"./components\";\nimport { getInfos, getSuggestions, downloadFileFromUrl, getPlaylist } from \"./utils/API\";\nimport {\n  host,\n  websocketProtocol,\n  getYtUrl,\n  isYtList,\n  generateDownloadUrl,\n  isJson,\n  isUid,\n  generateProgressText,\n  waitForOpenConnection,\n} from \"./utils/helpers\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [downloadFormat, setDownloadFormat] = useState(localStorage.getItem(\"format\") ? localStorage.getItem(\"format\")! : \"mp4\");\n\n  const [suggestions, setSuggestions] = useState<any>([]);\n  const [currentVideoInfo, setCurrentVideoInfo] = useState<any>(null);\n\n  const [playlistInfo, setPlaylistInfo] = useState<any>([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [downloadProgress, setDownloadProgress] = useState(0);\n  const [hidden, setHidden] = useState(true);\n\n  const [downloaded, setDownloaded] = useState(0);\n  const [totalSize, setTotalSize] = useState(1);\n\n  useEffect(() => {\n    localStorage.setItem(\"format\", downloadFormat);\n  }, [downloadFormat]);\n\n  const checkInput = async () => {\n    setIsLoading(true);\n    const ytId = getYtUrl(inputText);\n    if (ytId) {\n      await download(ytId);\n    } else if (isYtList(inputText)) {\n      await fetchPlaylist();\n    } else {\n      await fetchSuggestions();\n    }\n    setIsLoading(false);\n  };\n\n  const fetchSuggestions = async () => {\n    try {\n      const { data, success } = await getSuggestions(inputText);\n      if (success) {\n        setSuggestions(data);\n        setPlaylistInfo([]);\n        setCurrentVideoInfo(undefined);\n      }\n    } catch (err) {}\n  };\n\n  const fetchPlaylist = async () => {\n    try {\n      const { data, success } = await getPlaylist(inputText);\n      if (success) {\n        setPlaylistInfo(data);\n        setSuggestions([]);\n        setCurrentVideoInfo(undefined);\n      }\n    } catch (err) {}\n  };\n\n  const download = async (videoId: string) => {\n    setIsLoading(true);\n    setHidden(false);\n    const videoUrl = videoId || inputText;\n    if (!videoUrl) return;\n    const { data, success } = await getInfos(videoUrl);\n    if (success) {\n      const downloadUrl = generateDownloadUrl(videoUrl, downloadFormat);\n\n      // Create WebSocket connection.\n      const socket = new WebSocket(`${host.replace(/^https?/i, websocketProtocol)}`);\n\n      let uid = \"\";\n\n      // Listen for messages\n      socket.addEventListener(\"message\", event => {\n        if (isUid(event.data)) {\n          uid = isUid(event.data);\n        }\n        if (isJson(event.data)) {\n          const downloadProgress = JSON.parse(event.data);\n          setDownloadProgress((downloadProgress.downloaded / downloadProgress.total) * 75);\n          setDownloaded(downloadProgress.downloaded);\n          setTotalSize(downloadProgress.total);\n        }\n      });\n\n      if (socket.readyState !== socket.OPEN) {\n        try {\n          await waitForOpenConnection(socket);\n          socket.send(uid);\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        socket.send(uid);\n      }\n\n      setCurrentVideoInfo(data.videoDetails);\n      const filename = `${data.videoDetails.title}.${downloadFormat}`;\n\n      console.log(\"Starting download . . .\");\n      await downloadFileFromUrl(downloadUrl, uid, setDownloadProgress, filename);\n\n      setIsLoading(false);\n      setTimeout(() => {\n        setHidden(true);\n        setDownloadProgress(0);\n      }, 5000);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"search-section\">\n        <TextInput inputText={inputText} setInputText={setInputText} />\n        <ProgressBar\n          hidden={hidden}\n          striped\n          variant=\"success\"\n          now={downloadProgress}\n          label={generateProgressText(downloadProgress, downloaded, totalSize)}\n          style={{ width: \"100%\", height: \"30px\", lineHeight: \"30px\" }}\n        />\n        <FormatList downloadFormat={downloadFormat} setDownloadFormat={setDownloadFormat} />\n        <Button main isLoading={isLoading} onClick={checkInput}>\n          Search\n        </Button>\n      </section>\n      {currentVideoInfo && (\n        <section className=\"downloading-section\">\n          <div>\n            <h2>{currentVideoInfo.title}</h2>\n            <br />\n            <img src={`https://i.ytimg.com/vi/${currentVideoInfo.videoId}/hqdefault.jpg`} alt={currentVideoInfo.title} />\n          </div>\n        </section>\n      )}\n      {suggestions.length > 0 && (\n        <section className=\"suggestions-section\">\n          <h1>Suggestions</h1>\n          <Card suggestions={suggestions} isLoading={isLoading} download={download} />\n        </section>\n      )}\n      {playlistInfo.items?.length > 0 && (\n        <section className=\"playlist-section\">\n          <h1>{playlistInfo.author.name + \" - \" + playlistInfo.title}</h1>\n          <Playlist playlist={playlistInfo.items} isLoading={isLoading} download={download} />\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}